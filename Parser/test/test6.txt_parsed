(start (functionSpecifier my_fun1 ( ) { (funcInnerStatement (functionInvokation print ( (functionArgs (arithmeticExpression (powerExpression (baseExpression x)))) ))) }) (entryPoint main ( ) { }) (functionSpecifier my_fun2 ( x , y ) { (funcInnerStatement (functionInvokation fn ( (functionArgs main) ))) ; (funcInnerStatement (functionInvokation my_fun3 ( (functionArgs (arithmeticExpression (powerExpression (baseExpression a)))) ))) ; (funcInnerStatement (assignment a = (expression (arithmeticExpression (powerExpression (baseExpression (functionInvokation fn ( (functionArgs (arithmeticExpression (powerExpression (baseExpression (functionInvokation fn ( (functionArgs (arithmeticExpression (powerExpression (baseExpression x)))) )))))) , (functionArgs (arithmeticExpression (powerExpression (baseExpression fn)))) , (functionArgs (arithmeticExpression (powerExpression (baseExpression my_fun2)))) , (functionArgs (arithmeticExpression (powerExpression (baseExpression (functionInvokation my_fun2 ( )))))) )))))))) ; (funcInnerStatement (functionInvokation x ( ))) ; (funcInnerStatement (ifStatement if ( (relationExpression (compoundRelationExpr (arithmeticExpression (powerExpression (baseExpression x))))) ) (statement (funcInnerStatement (functionInvokation return ( (functionArgs (arithmeticExpression (addExpression (addExpression (addExpression (multDivExpression (powerExpression (baseExpression x)))) + (multDivExpression (powerExpression (baseExpression y)))) - (multDivExpression (powerExpression (baseExpression "Hello")))))) )))) else (statement (funcInnerStatement (functionInvokation return ( (functionArgs (arithmeticExpression (addExpression (addExpression (multDivExpression (powerExpression (baseExpression y)))) + (multDivExpression (powerExpression (baseExpression 1)))))) ))) ; (funcInnerStatement (functionInvokation my_fun3 ( ))) ; (funcInnerStatement (skipStatement skip))))) }) <EOF>)